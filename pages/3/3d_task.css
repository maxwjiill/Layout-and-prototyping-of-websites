.main {
    /* устанавливает позицию элемента относительно его нормального положения. */
    position: relative;
    
    /* ширина и высота элемента. */
    width: 200px;
    height: 200px;

    /* скрывает содержимое, выходящее за границы элемента. */
    overflow: hidden;
}

.room {
    position: absolute;
    top: 0;
    left: 0;

    /* устанавливают ширину и высоту элемента на 100% от родительского элемента. */
    width: 100%;
    height: 100%;
}

/* это псевдокласс, который применяется, когда элемент активен (например, когда на него нажимают). */
.room:active  {

    /* устанавливает прозрачность элемента 0 при активации. */
    opacity: 0;
}

.car1 {
    position: relative;
    top: 70px;
    left: 30px;
    width: 70%;

    /* позволяет высоте элемента рассчитываться автоматически на основе его ширины. */
    height: auto;

    /* задает анимацию для свойства transform и opacity с плавным входом и выходом. */
    transition: transform 1s ease-in-out, opacity 1s ease-in-out;
}

.car2 {
    position: relative;
    top: 70px;
    left: 30px;
    width: 70%;

    /* позволяет высоте элемента рассчитываться автоматически на основе его ширины. */
    height: auto;
}

.activeText {
    position: absolute;
    bottom: 150px;
    left: 55%;

    /* центрирует элемент по горизонтали. */
    transform: translateX(-50%);
    font-size: 15px;
    font-weight: bold;
    color: red;

    /* устанавливает начальную прозрачность элемента. */
    opacity: 0;

    /* задает анимацию для свойства opacity*/
    transition: opacity 0.5s ease-in-out;
    white-space: nowrap;
}


/* это селектор, который выбирает элемент с классом car1, но только если родительский элемент с классом main не находится в состоянии :hover. */
.main:not(:hover) .car1 {

    /* устанавливают нулевую прозрачность */
    opacity: 0;

    /* перемещают элемент вверх и влево за пределы видимой области при отсутствии наведения на .main. */
    transform: translate(-90%, 90%);
}


/* это селектор, который выбирает элемент с классом activeText только в случае, если родительский элемент .main находится в состоянии :hover. */
.main:hover .activeText {
    opacity: 1;
}

.clickText {
    position: absolute;
    bottom: 140px;
    left: 0;

    /* - поворачивает элемент на -37 градусов. */
    transform: rotate(-37deg);
    font-size: 13px;
    font-weight: bold;
    color: #5eb5c9;

    /* - изначально скрывает элемент. */
    display: none;
    white-space: nowrap;
}

.main .images-block .car2 {

    /* задает названия анимаций для применения к элементу. */
    animation-name: opA, rotA;

    /* устанавливает длительность каждой анимации. */
    animation-duration: 3s, 0.8s;

    /* устанавливает количество повторений для каждой анимации. */
    animation-iteration-count: 1, infinite;

    /* устанавливает направление анимации (нормальное, чередующееся в обратном порядке). */
    animation-direction: normal, alternate-reverse;

    /* устанавливает задержку перед началом каждой анимации. */
    animation-delay: 0s, 0s;

    /* изначально скрывает элемент. */
    display: none;
    position: absolute;
    top: 0%;
    left: 0%;
    transform: translate(-50%, -50%);
    opacity: 0;
}


/* это селектор, который выбирает элемент с классом car1 только в случае, если родительский элемент .main находится в состоянии :active. */
.main:active .images-block .car2 {
    display: block;
    opacity: 1;
    top: 30%;
    left: 20%;
    transition: none;
}


/* это селектор, который выбирает элемент с классом activeText только в случае, если родительский элемент .main находится в состоянии :active. */
.main:active .images-block .car1 {
    top: 150%; /* ни на что не влияет ни эта ни нижняя строка*/
    left: 150%;
    display: none;
}


/* это селектор, который выбирает элемент с классом clickText только в случае, если родительский элемент .main находится в состоянии :active. */
.main:active .activeText {
    top: 150%; /* скрытие текста*/
    left: 150%;
}

.main:active .clickText {
    display: block;
}

/* определение анимации с именем opA. */
@keyframes opA {

    /* задают начальное и конечное состояния анимации для свойства opacity. */
    from {opacity: 0}
    to {opacity: 1}
}

@keyframes rotA {

    /* начальное и конечное состояния анимации, где элемент поворачивается на -30 градусов. */
    0%, 100% {
        transform: rotate(-30deg);
    }

    /* состояние анимации на 50%, где элемент поворачивается на 30 градусов. */
    50% {
        transform: rotate(30deg);
    }

    /* начальное состояние анимации, где элемент уменьшается в 0.8 раза от его обычного размера. */
    from {
        transform: scale(0.7)
    }

    /* конечное состояние анимации, где элемент увеличивается в 1.1 раза от его обычного размера. */
    to {
        transform: scale(1)
    }
}

